前情回顾

1. IO    input  output

  input : 读操作 将数据获取到程序内存
  output: 将数据写出去

  IO密集 ： IO多  速度慢  存在读写 多阻塞
  计算密集： 计算多 cpu消耗大 速度快

2. io 模型

   阻塞IO

   非阻塞IO
   setblocking()
   settimeout()

3. IO多路复用


IO 多路复用三种方法对比

select  支持操作系统多  最多监控1024个IO

poll  支持Linux Unix  监控数量没有限制

epoll  支持Linux  监控数量没有限制
       效率比poll和select高
        支持边缘触发

水平触发： select  poll  epoll默认
边缘触发： epoll支持

IO网络并发
   只适用与多个IO同时发生场景
   处理逻辑比较简单的IO行为

多任务网络并发
   更适用于大型的结构框架




练习1：使用http协议
将一个文件的内容作为响应体发送给浏览器显示
（文件可以是文本也可以是图片）
Content-Type:image/jpeg   图片
Content-Type:text/plain  文本
Content-Type:text/html  网页

web服务程序 分析

功能：
    接收浏览器请求
    解析请求 请求内容
    根据请求组织数据内容
    将数据内容形成http响应格式给浏览器

要求：
    采用IO并发网络模型
    通过接口封装形式提供功能
    根据具体请求返回具体内容

1. 搭建IO网络并发服务模型
2. 将功能插入到模型当中
3. 如何进行封装

思考： 如何使用封装接口
socket()
  实例化对象 --》方法组合实现不同的功能

Process()
  实例化对象 --》按照步骤完成事件

确定让用户决定什么，通过传参的形式传入


后端核心编程总结

1. 网络通信
   网络基础知识
   udp套接字编程  （重点）
   tcp套接字编程  （重点）

   理论问题 ：
     1. OSI七层模型和tcp/ip模型
     2. 三次握手和四次挥手过程
     3. tcp和udp区别


2. 进程线程
     进程的创建  （重点）
     线程的创建  （同步互斥方法）

     理论： 对比进程和线程

3. IO模型
     阻塞IO  非阻塞IO
     IO多路复用方法
        掌握 select 和 epoll使用

     理论: HTTP协议解读 （请求响应格式）

4. 网络并发模型

     多任务并发模型  （重点）
     IO并发模型 （重点）

综合代码：
  聊天室 ： udp套接字  进程
          总分模式  网络协议设计（请求）

  ftp文件服务： tcp  多任务并发
           网络协议响应  请求应答流程

  webserver： tcp  IO并发 http协议
           接口编写  接口编写思路

作业：
1. 聊天室或者文件服务 二选一自己写一下
2. webserver 总结
3. 二阶段知识梳理

github.com






