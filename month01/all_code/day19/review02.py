"""
    复习 - Python语言核心(2)
        1. 运算符
            身份运算符:判断两个变量存储的地址是否相同
        2. continue和break的具体应用场景
            相同：都是跳转语句,只能在循环中使用
            不同：continue是跳过,break是跳出
            例如：在生活中嗑瓜子,正常向下咽,(循环)
                 但是偶尔遇到坏的,一定吐出,(跳转)
                 如果使用continue跳转,意味着继续嗑瓜子,直到嗑完全部
                 如果使用break跳转,意味着停止不再继续嗑瓜子
        3. 容器
            字符串:存储字符编码,不可变,序列
            列表:存储变量,可变,序列
            元组：存储变量,不可变,序列
            字典：存储键值对,可变,散列
            集合：存储键对,可变,散列
            不可变：采用按需分配的内存机制,如果改变会"损人利己".
            可变：采用预留空间+自动扩容的内存机制,相对于不可变数据的性能差(占用内存过多,创建速度慢)
            序列：有顺序,连续存储,节省内存,操作灵活(索引,切片)
            散列：无顺序,分散存储,定位单个元素最快
        4. 函数：
            设计理念：崇尚小而精,拒绝大而全
                例如：2048核心算法
                    上下调用左右,再调用合并,再调用零元素后移
            参数：
                实际参数：与形参进行对应
                    位置实参：按顺序
                        函数名(数据1,数据2)
                    序列实参：拆
                        函数名(*序列)
                    关键字实参：按名称
                        函数名(形参名1 = 数据1,形参名2 = 数据2)
                    字典实参：拆
                        函数名(**字典)

                形式参数：对实参的约束
                    位置形参：必填
                        def 函数名(形参名1,形参名2)
                    默认形参：可选
                        def 函数名(形参名1 = 数据,形参名2 = 数据)
                    星号元组形参：位置实参数量无限   【合】
                        def 函数名(*args)
                    双星号字典形参：关键字实参数量无限
                       　def 函数名(**kwargs)　　【合】
                    命名关键字形参：必须是关键字实参
                         def 函数名(*args,形参名)
                         def 函数名(形参名,*,形参名)
                            max(可迭代对象,key = lambda 参数:函数体)



"""

list01 = [10, [20, [30]]]
list02 = [10, [20, [30]]]
# 调用列表__eq__函数,使用元素内容是否相同的策略
print(list01 == list02)  # True
# 判断两个变量存储的地址是否相同
print(list01 is list02)  # False

a, *b, c = "我是齐天大圣孙悟空"
print(a)
print(b)  # ['是', '齐', '天', '大', '圣', '孙', '悟']
print(c)
# 为什么a是list类型

print("a", "b", "c", sep="_")
print("*", end=" ")
print("*")


def func01(p1=0, p2=0, p3=0):  # 合
    print(p1)
    print(p2)
    print(p3)


list01 = [3, 4, 4]
# func01(list01)  # 传递是一个列表
func01(*list01)  # 传递是一个多个元素
dict01 = {"p1": 1, "p2": 2, "p3": 3}
func01(**dict01)


# 传入可变,修改可变,无需使用return也可以传递结果
def func02(p1):
    p1[0] = 100


data01 = [10]
func02(data01)
print(data01)  # 100
