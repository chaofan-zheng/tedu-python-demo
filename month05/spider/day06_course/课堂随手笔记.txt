王伟超
wangweichao@tedu.cn
班级-中心-姓名

1、第四阶段课程介绍(13个工作日)
   1.1> 爬虫(7-8天左右)
        爬虫工程师
        作为Python开发工程师、数据分析工程师的附加技能
   1.2> Hadoop大数据(2-3左右)
   1.3> 数据结构(3天左右)
2、课程特点
   2.1> 综合
        第一阶段、MySQL、Redis、MongoDB、正则表达式re、多线程、多进程爬虫、HTML、JavaScript... 爬虫本身知识点
   2.2> 抽象(Hadoop、数据结构)
3、警惕
   3.1> 政府、公安机关的网站不能抓!!!
   3.2> 涉及到个人隐私数据(比如个人简历)
   遵纪守法,热爱生活

******************************************
1、爬虫分类及robots协议
   1.1> 通用网络爬虫-搜索引擎公司
        robots协议：网站会通过robots协议来告诉搜索引擎哪些页面可以抓,哪些页面不能抓,通用网络爬虫必须得遵守robots协议
   1.2> 聚焦网络爬虫
        自己写的爬虫程序,面向主题的爬虫,面向需求的爬虫
2、请求模块requests
   html = requests.get(url=url,headers={}).text
   html = requests.get(url=url,headers={}).content.decode('utf-8', 'ignore')
   响应对象resp属性
       .text    : 字符串
       .content : 字节串
       .status_code : HTTP响应码
       .url     : 返回实际数据的URL地址
3、写爬虫程序流程
   3.1> 静态数据
        3.1.1> 确认数据来源,右键查看网页源代码,搜索关键字
	3.1.2> 响应内容中存在!!!观察URL地址规律
	3.1.3> 写正则表达式 或者 xpath表达式,完善程序
   3.2> 动态数据
        3.2.1> 确认数据来源,右键查看网页源代码,搜索关键字
	3.2.2> 响应内容中不存在!!!
	3.2.3> F12抓包,寻找并分析返回实际数据的网络数据包
	3.2.4> GET请求：观察查询参数规律(QueryString Paramters)
               POST请求：观察Form表单数据规律
4、正则解析模块使用
   4.1> 用法：r_list = re.findall(regex, html, re.S)
   4.2> 结果
        r_list : 空列表(正则错误或者响应内容不对)
        r_list : ['','',...] (正则中1个分组)
	r_list : [(),(),...] (正则中多个分组)
5、数据持久化-MySQL
   5.1> __init__()创建数据库连接对象和游标对象
       self.db = pymysql.connect(.......)
       self.cur = self.db.cursor()
   5.2> save_html()将数据处理成列表(元组)存入数据库表中
       self.cur.execute(ins, [])
       self.db.commit()
   5.3> crawl()等所有页的数据抓取完成后断开数据库
       self.cur.close()
       self.db.close()
6、数据持久化-csv
   5.1> __init__()中打开文件并初始化csv文件写入对象
        self.f = open('文件名', 'w')
	self.writer = csv.writer(self.f)
   5.2> save_html()将数据处理成列表(元组)存入csv文件中
        self.writer.writerow([])
   5.3> crawl()等所有页的数据抓取完成后关闭文件
        self.f.close()
7、数据持久化-MongoDB
   7.1> __init__()中创建连接对象、库对象和集合对象
        self.conn = pymongo.MongoClient('localhost', 27017)
	self.db = self.conn['库名']
	self.myset = self.db['集合名']
   7.2> save_html()将数据处理成字典,然后存入mongodb数据库中
        self.myset.insert_one({})
   7.3> 常用命令
        >show dbs
	>use 库名
	>show collections
	>db.集合名.count()
	>db.集合名.find().pretty()
	>db.dropDatabase()
        MongoDB是一个基于磁盘存储的非关系数据库,文档型的数据库(库 - 集合 - JSON文档)
8、增量爬虫
   8.1> 原理 ：记录爬取过的指纹,每次抓之前先比对指纹
   8.2> 实现 ：利用Redis中集合来实现,存储每个请求的指纹
   8.3> 为什么使用redis
        原因1：Redis数据库基于内存,查询比对速度特别快
	原因2：Redis中自带集合数据类型,具有无序去重的特点,非常适合存储所有请求的指纹
9、目前遇到的反爬
   9.1> 反爬：针对请求头反爬(检查请求头合法性,User-Agent、Cookie、Referer)
        解决：利用headers参数,发送请求时包装请求头(User-Agent、Cookie、Referer)
   9.2> 反爬：针对User-Agent访问频率反爬
        解决：建立自己的User-Agent池,每次访问随机切换User-Agent;利用fake_useragent模块,随机切换User-Agent
   9.3> 反爬：针对IP地址访问频率反爬
        解决：建立自己的代理IP池,每次访问随机切换代理IP;代理IP池有免费的,也有收费的
   9.4> 反爬：响应内容和前端页面的节点结构不一致(百度贴吧小视频案例)
        解决：打印查看响应内容,以响应内容为准调整正则表达式或者xpath表达式
   9.5> 反爬：JS加密反爬(有道翻译)
        解决：F12抓包具体分析,找到加密的JS代码,破解并用Python按照相同的加密算法进行加密
   9.6> 反爬：JS逆向反爬(百度翻译)
        解决：F12抓包具体分析,找到加密的JS代码,用pyexecjs模块进行逆向处理(分析并调整JS代码)
   9.7> 反爬：Ajax动态加载(豆瓣电影)
        解决：F12抓包,分析具体返回实际数据的网络数据包
10、请求模块总结
   10.1> requests - 第三方模块
         requests.get()
	 requests.post()
	 resp = requests.get(url='',proxies={},headers={},timeout=3)
   
   10.2> urllib.request - 标准库模块
	 req = urllib.request.Request(url='', headers={})
	 resp= urllib.request.urlopen(req)
	 html = resp.read().decode('utf-8')
11、解析模块总结
   11.1> re
         r_list = re.findall(regex, html, re.S)
   11.2> lxml + xpath
         from lxml import etree
	 eobj = etree.HTML(html)
	 div_list = eobj.xpath('//div')
	 for div in div_list:
	     item = {}
	     item['name'] = div.xpath('.//p/text()')[0]
	     item['url'] = div.xpath('.//p/a/@src')[0]
   11.3> xpath总结
         结果1：[]
	        xpath表达式有问题,或者响应内容不对
	 结果2：[<element div at xxx>,<element div at xxx>,...]
	        xpath表达式的末尾一定没有 /text() 或 /@属性名
	 结果3：['字符串1', '字符串2', '字符串3', ... ...]
	        xpath表达式的末尾一定有：/text() 或 /@属性名
12、JS加密及逆向流程梳理
   12.1> 打开浏览器,F12打开控制台,准备抓包
   12.2> 输入官网地址,页面执行某些行为,让数据动态加载并在控制台捕获这些网络数据包
   12.3> 寻找并分析返回实际数据的网络数据包
         F12->NetWork->XHR->单击网络数据包->Preview
	 Headers->General、Request Headers、QueryString Paramters、FormData
   12.4> 观察网络数据包的规律
         GET请求：观察Query String Paramters规律
	 POST请求：观察FormData规律
   12.5> 如果有JS加密,需要进一步抓包寻找加密的JS文件进行破解
13、节前回顾
   13.1> 请求模块 - requests
         resp = requests.get(url=url, headers={})
	 resp = requests.post(url=url, data={}, headers={})
         resp.text : 响应内容(字符串)
	 resp.content : 响应内容(字节串)
	 resp.status_code : HTTP响应码
	 resp.url : 返回实际数据的URL地址
	 url = ''
	 proxies = {'http':'http://1.1.1.1:8888'}
	 data = {}
	 headers = {}
	 timeout = 3
   13.2> 解析模块
         13.2.1> re
	         import re
		 r_list = re.findall(regex, html, re.S)
	 13.2.2> lxml + xpath
		 from lxml import etree
		 eobj = etree.HTML(html)
		 div_list = eobj.xpath('基准xpath表达式')
		 for div in div_list:
		     item = {}
		     item['name'] = div.xpath('.//xxxx')
   	 13.2.3> selenium + xpath
	         div_list = driver.find_elements_by_xpath('')
		 for div in div_list:
		     item = {}
		     item['name'] = div.find_element_by_xpath('').text
   13.3> selenium总结
         13.3.1> 使用流程
	         from selenium import webdriver
		 driver = webdriver.Chrome()
		 driver = webdriver.Firefox()
		 driver = webdriver.PhantomJS()
		 driver.get(url='')
	 13.3.2> 定位节点(elements 和 element)
	         r_list = driver.find_elements_by_id("")
		 node = driver.find_element_by_id("")
		 # 异常：NoSuchElementException：... ...
		 r_list = driver.find_elements_by_name("")
		 r_list = driver.find_elements_by_class_name("")
		 r_list = driver.find_elements_by_xpath("")
		 node = driver.find_element_by_link_text("")
		 node = driver.find_element_by_partical_link_text("")
	 13.3.3> 高级操作
	         鼠标操作
		    from selenium.webdriver import ActionChains
		    ActionChains(driver).move_to_element(node).perform()
		 切换句柄
		    all_handles = driver.window_handles
		    driver.switch_to.window(all_handles[1])
		 设置无界面
		    options = webdriver.ChromeOptions()
		    options.add_argument('--headless')
		    driver = webdriver.Chrome(options=options)
   13.4> 遇到过的反爬
         反爬1：请求头反爬(网站检查头中的Cookie、Referer、User-Agent)
	 反爬2：User-Agent频率检查(建立User-Agent池)
	 反爬3：IP地址频率检查(建立代理IP池)
	 反爬4：Ajax动态加载(抓包工具抓取对应的网络数据包进行分析)
	 反爬5：JS加密反爬(抓包工具抓取对应网络数据包分析破解)
	 反爬6：JS逆向反爬(利用pyexecjs模块进行逆向处理)
14、多线程爬虫原理
   CPU密集程序,适合使用多进程
   IO操作多场景,适合使用多线程,爬虫IO场景很多
      爬虫IO场景之一：网络IO(发请求之后阻塞等待响应)
      爬虫IO场景之二：本地磁盘IO(抓取的数据存入本地文件)
   多线程在爬虫的世界中,能极大提升数据抓取的效率
15、多线程爬虫代码实现







